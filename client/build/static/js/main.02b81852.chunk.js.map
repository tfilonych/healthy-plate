{"version":3,"sources":["context/AuthContext.js","pages/AuthPage.js","hooks/http.hook.js","hooks/message.hook.js","pages/HomePage.js","pages/RecipesPage.js","components/Footer.js","components/TopPanel.js","components/Navbar2.js","components/Logo.js","components/Header.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","AuthPage","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","useHttp","text","window","M","toast","html","useContext","email","password","form","useEffect","registerHandler","console","log","className","placeholder","id","type","name","onClick","HomePage","RecipesPage","recipes","title","description","items","Array","map","_","i","src","Footer","useHistory","TopPanel","to","Navbar","Logo","Header","open","toggleClass","prev","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","Provider","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.02b81852.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nfunction noop() {}\n\nexport const AuthContext = createContext({\n    token: null,\n    userId: null,\n    login: noop,\n    logout: noop,\n    isAuthenticated: false\n});","import React, {useState, useEffect, useContext} from 'react';\nimport { useHttp } from '../hooks/http.hook';\nimport { useMessage } from '../hooks/message.hook';\nimport { AuthContext } from '../context/AuthContext';\n\nconst AuthPage = () => {\n    const { error, request, clearError } = useHttp();\n    const message = useMessage();\n    const auth = useContext(AuthContext);\n\n    const [form, setForm] = useState({\n        email: '',\n        password: ''\n    });\n\n    useEffect(() => {\n        message(error)\n        clearError()\n    }, [error, message, clearError])\n\n    const changeHandler = (e) => {\n        setForm({ ...form, [e.target.name]: e.target.value });\n    };\n\n    const registerHandler = async () => {\n        try {\n            const data = await request('/api/auth/register', 'POST', { ...form });\n            console.log(data);\n        } catch (e) {}\n    }\n\n    const loginHandler = async () => {\n        try {\n            const data = await request('/api/auth/login', 'POST', { ...form });\n            console.log(data);\n            auth.login(data.token, data.userId);\n        } catch (e) {}\n    }\n\n    return (\n        <div className=\"form-container\">\n            <div className=\"form-title\">Sign In</div>\n            <div className=\"login\">\n                <input\n                  placeholder=\"Enter login\"\n                  id=\"login\"\n                  type=\"text\"\n                  name=\"login\"\n                  className=\"validate\"\n                  // autoComplete=\"off\"\n                  // onChange={changeHandler}\n                />\n            </div>\n            <div className=\"password\">\n                <input\n                  placeholder=\"Enter password\"\n                  id=\"password\"\n                  type=\"text\"\n                  name=\"password\"\n                  // onChange={changeHandler}\n                  className=\"validate\"\n                />\n            </div>\n            <div className=\"buttons\">\n                <div className=\"button sign-in\"\n                  // style={{marginRight: 10}}\n                  // onClick={loginHandler}\n                >\n                    Sign In\n                </div>\n                <div\n                  className=\"button\"\n                  onClick={registerHandler}\n                >\n                    Sign Up\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default AuthPage;","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setLoading(true);\n\n        try {\n            if (body) {\n                body = JSON.stringify(body);\n                headers['Content-Type'] = 'application/json';\n            }\n\n            const response = await fetch(url, {method, body, headers});\n            const data = await response.json();\n\n            if (!response.ok) {\n                throw new Error(data.message || 'Something went wrong');\n            }\n\n            setLoading(false);\n\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {\n        loading,\n        request,\n        error,\n        clearError\n    }\n}","import { useCallback } from 'react'\n\nexport const useMessage = () => {\n    return useCallback(text => {\n        if (window.M && text) {\n            window.M.toast({ html: text })\n        }\n    }, [])\n}","import React from 'react';\n\nconst HomePage = () => {\n\n  return (\n    <div className=\"home-page-container\">\n      <div className=\"home-page\">\n        <div className=\"blw item\" />\n        <div className=\"pure item\" />\n        <div className=\"prediatric item\" />\n      </div>\n    </div>\n  )\n}\n\nexport default HomePage;\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\n\nconst RecipesPage = () => {\n  const recipes =\n    {\n      title: 'Some title',\n      description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'\n    }\n  const items = [...Array(10)].map((_, i) => recipes);\n\n  console.log(items);\n\n  return (\n    <div className=\"recipes\">\n      {items.map((i) => {\n        return (\n          <div className=\"recipe\">\n            {/*<div className=\"img\" />*/}\n            <img src=\"https://i0.wp.com/demo.wpzoom.com/gourmand/files/2019/04/gourmand14.jpg?resize=380%2C520&ssl=1\" />\n            <div className=\"txt-container\">\n              <div className=\"title\">{i.title}</div>\n              <div className=\"description\">{i.description}</div>\n              <div className=\"more-btn\">More</div>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default RecipesPage;","import React, {useContext} from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { AuthContext } from '../context/AuthContext'\n\nexport const Footer = () => {\n  const history = useHistory()\n  const auth = useContext(AuthContext)\n\n  const logoutHandler = event => {\n    event.preventDefault()\n    auth.logout()\n    history.push('/')\n  }\n\n  return (\n    <div className=\"footer\">\n      Footer will be placed here\n    </div>\n  )\n}","import React, {useContext} from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\n\nexport const TopPanel = () => {\n  const history = useHistory();\n  const auth = useContext(AuthContext);\n\n  const logoutHandler = event => {\n    event.preventDefault();\n    auth.logout();\n    history.push('/');\n  }\n\n  return (\n    <div className=\"top-panel\">\n      <div className=\"login-btn\">\n        <Link to=\"/login\">Sign In</Link>\n      </div>\n    </div>\n  );\n};\n","import React, {useContext} from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { AuthContext } from '../context/AuthContext'\n\nexport const Navbar = () => {\n  const history = useHistory()\n  const auth = useContext(AuthContext)\n\n  const logoutHandler = event => {\n    event.preventDefault()\n    auth.logout()\n    history.push('/')\n  }\n\n  return (\n    <div className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/\">About</Link>\n      <Link to=\"/recipes\">Recipes</Link>\n    </div>\n  )\n};\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Logo = () => (\n  <>\n    <div className=\"logo\">\n      <span>Healthy</span>\n      <span>Plate</span>\n    </div>\n    <div className=\"logo-sm\">\n      <span>H</span>\n      <span>P</span>\n    </div>\n  </>\n);\n","import React, { useContext, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nimport {TopPanel} from './TopPanel';\nimport {Navbar} from './Navbar2';\nimport {Logo} from './Logo';\n\nexport const Header = () => {\n  const history = useHistory();\n  const auth = useContext(AuthContext);\n  const [open, toggleClass] = useState(false)\n\n  const logoutHandler = event => {\n    event.preventDefault();\n    auth.logout();\n    history.push('/');\n  }\n\n  const toggleMenu = () => {\n    toggleClass((prev) => !prev);\n  }\n  return (\n    <div className={`header ${open ? 'open' : ''}`}>\n      <div className={`nav-icon`} onClick={toggleMenu}>\n        <div></div>\n      </div>\n      <TopPanel />\n      <Logo />\n      <Navbar />\n    </div>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\nimport { AuthContext } from './context/AuthContext';\nimport { Footer } from './components/Footer';\nimport {Header} from './components/Header';\n\nfunction App() {\n  const { token, login, logout, userId } = useAuth();\n  const isAuthenticated = !!token;\n  console.log('isAuthenticated ', isAuthenticated)\n  const routes = useRoutes(isAuthenticated);\n\n  return (\n    <AuthContext.Provider value={{\n        token, login, logout, userId, isAuthenticated\n    }}>\n       <Router>\n          <Header />\n           <div className=\"hp-content\">\n              {routes}\n           </div>\n          <Footer />\n       </Router>\n    </AuthContext.Provider>\n  )\n}\n\nexport default App;\n","import { useState, useCallback, useEffect } from 'react'\n\nconst storageName = 'userData'\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(null)\n    const [ready, setReady] = useState(false)\n    const [userId, setUserId] = useState(null)\n\n    const login = useCallback((jwtToken, id) => {\n        setToken(jwtToken)\n        setUserId(id)\n\n        localStorage.setItem(storageName, JSON.stringify({\n            userId: id, token: jwtToken\n        }))\n    }, [])\n\n\n    const logout = useCallback(() => {\n        setToken(null)\n        setUserId(null)\n        localStorage.removeItem(storageName)\n    }, [])\n\n    useEffect(() => {\n        const data = JSON.parse(localStorage.getItem(storageName))\n\n        if (data && data.token) {\n            login(data.token, data.userId)\n        }\n        setReady(true)\n    }, [login])\n\n\n    return { login, logout, token, userId, ready }\n}","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport AuthPage from './pages/AuthPage';\nimport HomePage from \"./pages/HomePage\";\nimport RecipesPage from './pages/RecipesPage';\n\nexport const useRoutes = isAuthenticated => {\n    // console.log(isAuthenticated)\n    // if (!isAuthenticated) {\n    //     return (\n    //         <Switch>\n    //             <Route path=\"/links\" exact>\n    //                 <LinksPage />\n    //             </Route>\n    //             <Route path=\"/create\" exact>\n    //                 <CreatePage />\n    //             </Route>\n    //             <Route path=\"/detail/:id\" exact>\n    //                 <DetailPage />\n    //             </Route>\n    //             <Redirect to=\"/create\" />\n    //         </Switch>\n    //     )\n    // }\n\n    return (\n        <Switch>\n          <Route path=\"/recipes\">\n            <RecipesPage />\n          </Route>\n          <Route path=\"/login\">\n            <AuthPage />\n          </Route>\n            <Route path=\"/\" exact>\n                <HomePage />\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}